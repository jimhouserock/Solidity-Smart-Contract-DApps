// SPDX-License-Identifier: GPL-3.0
        
pragma solidity >=0.4.22 <0.9.0;

// This import is automatically injected by Remix web IDE
import "remix_tests.sol"; 

// This import is required to use custom transaction context
// Although it may fail compilation in 'Solidity Compiler' plugin
// But it will work fine in 'Solidity Unit Testing' plugin
import "remix_accounts.sol";
import "../contracts/SimpleMint.sol";

// Define a new Solidity contract named TestNFTMinter
contract TestNFTMinter {
// Declare two public variables: nftMinter of type NFTMinter and owner of type address payable
NFTMinter public nftMinter;
address payable public owner;
// Declare a public variable named testRecipient of type address payable
address payable public testRecipient;

// Define a function named beforeEach with public visibility
function beforeEach() public {
    // Instantiate a new NFTMinter contract and assign it to the nftMinter variable
    nftMinter = new NFTMinter();
    // Set the owner variable to the current contract address (converted to payable)
    owner = payable(address(this));

}

// Define a function named testToggleMinting with public visibility
function testToggleMinting() public {
    // Check that minting is disabled by default and throw an error message if not
    Assert.equal(nftMinter.isMintEnabled(), false, "Minting should be false by default");

    // Call the toggleMinting function on the nftMinter contract to disable minting
    nftMinter.toggleMinting();
    // Check that minting is enabled and throw an error message if not
    Assert.equal(nftMinter.isMintEnabled(), true, "Minting should be enabled after calling toggleMinting");

    // Call the toggleMinting function again to enable minting
    nftMinter.toggleMinting();
    // Check that minting is disabled and throw an error message if not
    Assert.equal(nftMinter.isMintEnabled(), false, "Minting should be disabled after calling toggleMinting again");
}

// Define a function named testSetMaxSupply with public visibility
function testSetMaxSupply() public {
    // Check that the maximum supply is set to 2 by default and throw an error message if not
    Assert.equal(nftMinter.maxSupply(), 2, "Max supply should be 2 by default");

    // Call the setMaxSupply function on the nftMinter contract to set a new maximum supply
    nftMinter.setMaxSupply(5);
    // Check that the maximum supply has been updated and throw an error message if not
    Assert.equal(nftMinter.maxSupply(), 5, "Max supply should be updated to 5 after calling setMaxSupply");
}

// Define a function named testSetMintPrice with public visibility
function testSetMintPrice() public {
    // Check that the mint price is set to 0.01 ether by default and throw an error message if not
    Assert.equal(nftMinter.mintPrice(), 0.01 ether, "Mint price should be 0.01 ether by default");

    // Call the setMintPrice function on the nftMinter contract to set a new mint price
    nftMinter.setMintPrice(0.05 ether);
    // Check that the mint price has been updated and throw an error message if not
    Assert.equal(nftMinter.mintPrice(), 0.05 ether, "Mint price should be updated to 0.05 ether after calling setMintPrice");
}
